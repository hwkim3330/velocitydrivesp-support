#!/bin/env ruby

# Copyright (c) 2021-2022 Microchip Technology Inc. and its subsidiaries.
# SPDX-License-Identifier: MIT

require_relative "../yang-enc/yang-schema.rb"
require_relative "../yang-enc/yang-enc.rb"
require 'yaml'
require 'pp'

def main
  top = __dir__  # Script location
  2.times do     # Assume script is located two dirs above repository root
    top = File.dirname(top)
  end
  # top is now the absolute repository root

  bc = []
  cmd = nil
  ext = nil

  opt_parser = OptionParser.new do |opts|
    opts.banner = """Usage: bc2cbor [options]

  Merges all the given board config files into one and converts the result to CBOR.
  The merge prefers later files to earlier files.
  Lists are concatenated and leaf-lists are replaced.
  Options:"""
    opts.on("-h", "--help", "Show this message") do
      puts opts
      exit
    end

    opts.on("-b FILE", "--board-config FILE", "Board config file (if repeated then files will be merged)") do |f|
      bc << YAML.load_file(f)
    end

    opts.on("-e FILE", "--extension-module FILE", "Extension module binary") do |f|
      ext = YAML.load_file(f)
    end

    opts.on("-c", "--check-only", "Just do the schema-check (no conversion)") do |f|
      exclusive_opts_error() if cmd
      cmd = :only_check
    end

    opts.on("-d", "--dump-merged-board-config", "Dump the merged boardconfig in YAML format") do |f|
      exclusive_opts_error() if cmd
      cmd = :dump_merged
    end

    opts.on("-s", "--schema-dump", "Dump the JSON schema to stdout") do |f|
      exclusive_opts_error() if cmd
      cmd = :schema_dump
    end
  end

  opt_parser.parse!(ARGV)

  bc = bc.reduce(&method(:merge_hashes))
  abort("No input") if bc.nil? and cmd != :schema_dump

  if ext
    bc["board:extmod"] = {} if bc["board:extmod"].nil?
    bc["board:extmod"]["text"] = ext["text"]
    bc["board:extmod"]["data_offset"] = ext["data_offset"]
  end

  bc_schema = generate_yang_schema("#{top}/docs/sw_refs/yang",
                                   ["#{top}/docs/sw_refs/yang/board.yang"],
                                   ["#{top}/docs/sw_refs/yang/board@2025-03-31.sid"])
  json_schema = to_json_schema(bc_schema, 'yang')
  schemer = JSONSchemer.schema(json_schema)

  case cmd
  when :schema_dump
    puts JSON.pretty_generate(json_schema)

  when :dump_merged
    puts bc.to_yaml

  when :only_check
    valid = true
    errmsg = schemer.validate(bc).map{|e| JSONSchemer::Errors.pretty(e)}
    if errmsg.size == 0
      puts "Schema check: Passed"
    else
      puts "Schema check: Failed"
      puts errmsg.join("\n")
    end

  else
    bc_cbor = json_seq2cbor(bc_schema, bc, 'yang')
    STDOUT.binmode
    STDOUT.write(bc_cbor)
  end
end

def merge_hashes a, b
  a = a.clone
  b.each do |k, new_val|
    old_val = a[k]
    if old_val.is_a? Hash and new_val.is_a? Hash
      a[k] = merge_hashes old_val, new_val
    elsif old_val.is_a? Array and new_val.is_a? Array
      if old_val.first.is_a? Hash and new_val.first.is_a? Hash
        a[k] += new_val
      else
        a[k] = new_val
      end
    else
      a[k] = new_val
    end
  end
  return a
end

def exclusive_opts_error
  puts "Options: -c, -d and -s are mutually exclusive!"
  exit 1
end

main if $0 == __FILE__
