#!/bin/env ruby

# Copyright (c) 2021-2022 Microchip Technology Inc. and its subsidiaries.
# SPDX-License-Identifier: MIT

require_relative "../yang-enc/yang-schema.rb"
require_relative "../yang-enc/yang-enc.rb"
require 'base64'
require 'pp'

def main
  top = __dir__  # Script location
  2.times do     # Assume script is located two dirs above repository root
    top = File.dirname(top)
  end
  # top is now the absolute repository root

  bc = []

  opt_parser = OptionParser.new do |opts|
    opts.banner = """Usage: bc2cbor [options]

  Merges all the given board config files into one and converts the result to CBOR.
  The merge prefers later files to earlier files.
  Lists are concatenated and leaf-lists are replaced.
  Options:"""
    opts.on("-h", "--help", "Show this message") do
      puts opts
      exit
    end
    opts.on("-b FILE", "--board-config FILE", "Board config file") do |f|
      bc << YAML.load_file(f)
    end
  end

  opt_parser.parse!(ARGV)

  bc = bc.reduce(&method(:merge_hashes))
  abort("No input") if bc.nil?

  bc_schema = generate_yang_schema("#{top}/docs/sw_refs/yang",
                                   ["#{top}/docs/sw_refs/yang/board.yang"],
                                   ["#{top}/docs/sw_refs/yang/board@2024-12-31.sid"])
  bc_cbor = json_seq2cbor(bc_schema, bc, 'yang')

  STDOUT.binmode
  STDOUT.write(bc_cbor)
end

def merge_hashes a, b
  a = a.clone
  b.each do |k, new_val|
    old_val = a[k]
    if old_val.is_a? Hash and new_val.is_a? Hash
      a[k] = merge_hashes old_val, new_val
    elsif old_val.is_a? Array and new_val.is_a? Array
      if old_val.first.is_a? Hash and new_val.first.is_a? Hash
        a[k] += new_val
      else
        a[k] = new_val
      end
    else
      a[k] = new_val
    end
  end
  return a
end

main if $0 == __FILE__
